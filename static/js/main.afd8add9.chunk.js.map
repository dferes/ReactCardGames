{"version":3,"sources":["back.png","hooks.js","PlayingCard.js","PlayingCardList.js","pokemonList.js","PokemonSelect.js","helpers.js","PokemonCard.js","PokeDex.js","CardTable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useAxios","url","useState","responses","setResponse","a","prependString","axios","get","newRes","oldData","data","id","uuid","useFlip","isUp","setIsUp","PlayingCard","front","back","backOfCard","isFacingUp","setIsFacingUp","src","alt","onClick","className","CARD_API","CardTable","cards","addCard","map","cardData","key","image","defaultProps","pokemon","BASE_URL","PokemonSelect","add","pokemonList","pokeIdx","setPokeIdx","onChange","evt","target","value","p","idx","values","Math","floor","random","length","PokemonCard","name","stats","stat","PokeDex","addPokemon","sprites","front_default","back_default","base_stat","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.afd8add9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/back.f3a868fd.png\";","import React, { useState } from 'react';\nimport axios from 'axios';\nimport uuid from 'uuid';\n\nconst useFlip = () => {\n  const [ isUp, setIsUp ] = useState(true);\n  const toggleCard = () =>  (setIsUp(isUp => !isUp));\n  \n  return [ isUp, toggleCard ];\n}\n\nconst useAxios = (url) => {\n  const [ responses, setResponse ] = useState([]);\n  \n  const getResponse = async (url, prependString='') => {\n    const newRes = await axios.get(`${url}${prependString}`);\n    setResponse(oldData => [...oldData, { ...newRes.data, id: uuid()}]);\n  };\n  return [ responses, getResponse];\n}\n\nexport default useFlip;\nexport {useFlip, useAxios};","import React from \"react\";\nimport backOfCard from \"./back.png\";\nimport \"./PlayingCard.css\"\nimport useFlip  from './hooks';\n\n/* Renders a single playing card. */\nfunction PlayingCard({ front, back = backOfCard }) {\n  const [isFacingUp, setIsFacingUp] = useFlip(true);\n  return (\n    <img\n      src={isFacingUp ? front : back}\n      alt=\"playing card\"\n      onClick={ () => setIsFacingUp(!isFacingUp)}\n      className=\"PlayingCard Card\"\n    />\n  );\n}\n\nexport default PlayingCard;\n","import React from \"react\";\nimport PlayingCard from \"./PlayingCard\";\nimport \"./PlayingCardList.css\";\nimport {useAxios} from './hooks';\nconst CARD_API = \"https://deckofcardsapi.com/api/deck/new/draw/\";\n\n/* Renders a list of playing cards.\n * Can also add a new card at random. */\nfunction CardTable() {\n  const [cards, addCard] = useAxios(CARD_API);\n  return (\n    <div className=\"PlayingCardList\">\n      <h3>Pick a card, any card!</h3>\n      <div>\n        <button onClick={() => addCard(CARD_API)}>Add a playing card!</button>\n      </div>\n      <div className=\"PlayingCardList-card-area\">\n        {cards.map(cardData => (\n          <PlayingCard key={cardData.id} front={cardData.cards[0].image} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nCardTable.defaultProps = {};\n\nexport default CardTable;\n","/* list of common pokemon for the PokemonSelect component. */\nconst pokemon = [\n  \"pikachu\",\n  \"jigglypuff\",\n  \"charizard\",\n  \"gengar\",\n  \"arcanine\",\n  \"bulbasaur\",\n  \"blaziken\",\n  \"umbreon\",\n  \"lucario\",\n  \"gardevoir\",\n  \"eevee\",\n  \"dragonite\",\n  \"absol\",\n  \"typhlosion\",\n  \"ampharos\",\n  \"squirtle\",\n  \"flygon\",\n  \"ninetales\",\n  \"tyranitar\",\n  \"infernape\",\n  \"snorlax\",\n  \"torterra\",\n  \"luxray\",\n  \"scizor\",\n  \"blastoise\",\n  \"mudkip\",\n  \"garchomp\"\n];\n\nexport default pokemon;\n","import React, { useState } from \"react\";\nimport pokemonList from \"./pokemonList\";\nimport { choice } from \"./helpers\";\nconst BASE_URL = \"https://pokeapi.co/api/v2/pokemon/\";\n\n/* Select element to choose from common pokemon. */\nfunction PokemonSelect({ add, pokemon = pokemonList }) {\n  const [pokeIdx, setPokeIdx] = useState(0);\n  const handleChange = evt => {\n    setPokeIdx(evt.target.value);\n  };\n\n  return (\n    <div>\n      <select onChange={handleChange}>\n        {pokemon.map((p, idx) => (\n          <option key={idx} value={idx}>\n            {p}\n          </option>\n        ))}\n      </select>\n      <button onClick={() => add(BASE_URL, pokemon[pokeIdx])}>Catch one!</button>\n      <button onClick={() => add(BASE_URL, choice(pokemon))}>I'm feeling lucky</button>\n    </div>\n  );\n}\n\nexport default PokemonSelect;\n","/* Select a random element from values array. */\nfunction choice(values) {\n  const randIdx = Math.floor(Math.random() * values.length);\n  return values[randIdx];\n}\n\nexport { choice };","import React from \"react\";\nimport \"./PokemonCard.css\";\nimport useFlip from './hooks';\n\n/* Renders a single pokemon card. */\nfunction PokemonCard({ front, back, name, stats }) {\n  const [isFacingUp, setIsFacingUp] = useFlip(true);\n\n  return (\n    <div onClick={ () => setIsFacingUp(!isFacingUp)} className=\"PokemonCard Card\">\n      {isFacingUp ? (\n        <div className=\"PokemonCard-front\">\n          <img src={front} alt={`{name} front`} />\n          <div>\n            <p className=\"PokemonCard-name\">{name}</p>\n            <ul className=\"PokemonCard-stats\">\n              {stats.map(stat => (\n                <li key={stat.name}>\n                  <em>{stat.name}</em>: {stat.value}\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      ) : (\n        <div className=\"PokemonCard-back\">\n          <img src={back} alt={`{name} back`} />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default PokemonCard;\n","import React from \"react\";\nimport PokemonSelect from \"./PokemonSelect\";\nimport PokemonCard from \"./PokemonCard\";\nimport \"./PokeDex.css\";\nimport { useAxios } from \"./hooks\";\nconst BASE_URL = \"https://pokeapi.co/api/v2/pokemon/\";\n\n/* Renders a list of pokemon cards.\n * Can also add a new card at random,\n * or from a dropdown of available pokemon. */\nfunction PokeDex() {\n  const [pokemon, addPokemon] = useAxios(BASE_URL);\n  // const addPokemon = async name => {\n  //   const response = await axios.get(\n  //     `https://pokeapi.co/api/v2/pokemon/${name}/`\n  //   );\n  //   setPokemon(pokemon => [...pokemon, { ...response.data, id: uuid() }]);\n  // };\n  return (\n    <div className=\"PokeDex\">\n      <div className=\"PokeDex-buttons\">\n        <h3>Please select your pokemon:</h3>\n        <PokemonSelect add={addPokemon} />\n      </div>\n      <div className=\"PokeDex-card-area\">\n        {pokemon.map(cardData => (\n          <PokemonCard\n            key={cardData.id}\n            front={cardData.sprites.front_default}\n            back={cardData.sprites.back_default}\n            name={cardData.name}\n            stats={cardData.stats.map(stat => ({\n              value: stat.base_stat,\n              name: stat.stat.name\n            }))}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default PokeDex;\n","import React from \"react\";\nimport PlayingCardList from \"./PlayingCardList\";\nimport PokeDex from \"./PokeDex\";\nimport \"./CardTable.css\";\n\n/* Main component. Renders card lists for\n * playing cards and pokemon. */\nfunction CardTable() {\n  return (\n    <div className=\"CardTable\">\n      <header>\n        <h1 className=\"CardTable-heading\">Check out all my cards.</h1>\n      </header>\n      <main>\n        <PlayingCardList />\n        <PokeDex />\n      </main>\n    </div>\n  );\n}\n\nexport default CardTable;\n","import React from \"react\";\nimport CardTable from \"./CardTable\";\n\nfunction App() {\n  return (\n    <CardTable />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}